/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.yeshcp.tpush;

import java.util.Set;
import java.util.HashSet;
import java.util.HashMap;
import android.content.Context;  
import android.content.Intent;
import android.os.Bundle;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollObject;
import org.appcelerator.kroll.KrollFunction;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;

import com.tencent.android.tpush.XGBasicPushNotificationBuilder;
import com.tencent.android.tpush.XGPushClickedResult;
import com.tencent.android.tpush.XGPushConfig;
import com.tencent.android.tpush.XGPushManager;
import com.tencent.android.tpush.horse.Tools;
import com.tencent.android.tpush.XGIOperateCallback;

@Kroll.module(name="Tpush", id="com.yeshcp.tpush")
public class TpushModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "TpushModule";

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public TpushModule()
	{
		super("Tpush");
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(TAG, "inside onAppCreate");
		XGPushConfig.enableDebug(app, false);
		// put module init code that needs to run when the application is created
	}

	@Kroll.method
	public void registerPush(final KrollFunction callback)
	{
		XGPushManager.registerPush(TiApplication.getInstance(), new XGIOperateCallback(){
			@Override
			public void onSuccess(Object data, int flag) {
				Log.d("TPush", "success,token is" + data);
				if(callback != null){
					KrollDict map = new KrollDict();
					map.put("status", "success");
		            map.put("data", data);
		            map.put("flag", flag);     
					callback.callAsync(getKrollObject(),map);
				}
			}
			@Override
			public void onFail(Object data, int errCode, String msg){
				Log.d("TPush", "fail:" + errCode + ",error:" + msg);
				if(callback != null){
					KrollDict map = new KrollDict();
		            map.put("status", "fail");
		            map.put("data", data);
		            map.put("errCode", errCode);
		            map.put("msg", msg);     
					callback.callAsync(getKrollObject(),map);
				}
			}
			
		});
	}


	@Kroll.method
	public void registerWithUsername(String username, final KrollFunction callback)
	{
		XGPushManager.registerPush(TiApplication.getInstance(), username, new XGIOperateCallback(){
			@Override
			public void onSuccess(Object data, int flag) {
				Log.d("TPush", "success,token:" + data);
				if(callback != null){
					KrollDict map = new KrollDict();
					map.put("status", "success");
		            map.put("data", data);
		            map.put("flag", flag);     
					callback.callAsync(getKrollObject(),map);
				}
			}
			@Override
			public void onFail(Object data, int errCode, String msg){
				Log.d("TPush", "fail" + errCode + ",error:" + msg);
				if(callback != null){
					KrollDict map = new KrollDict();
		            map.put("status", "fail");
		            map.put("errCode", errCode);
		            map.put("msg", msg);     
					callback.callAsync(getKrollObject(),map);
				}
			}
			
		});
	}

	@Kroll.method
	public void unregisterPush(){
		XGPushManager.unregisterPush(TiApplication.getInstance());
	}

	@Kroll.method
	public void setTag(String tag){
		if(tag != null && tag != ""){
			XGPushManager.setTag(TiApplication.getInstance(), tag);
		}
	}

	@Kroll.method
	public void deleteTag(String tag){
		if(tag != null && tag != ""){
			XGPushManager.deleteTag(TiApplication.getInstance(), tag);
		}
	}

	@Kroll.method
	public String getToken(){
		return XGPushConfig.getToken(TiApplication.getInstance());
	}





	// for receiver
	//get current module
	private static TpushModule getModule() {
		TiApplication appContext = TiApplication.getInstance();
		TpushModule tp = (TpushModule)appContext.getModuleByName("Tpush");
		return tp;
	}

	
	//tpush register callback
	public static void handleRegisterResult(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("registerResult", map);
	    }
	}

	public static void handleUnregisterResult(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("unregisterResult", map);
	    }
	}

	public static void handleSetTagResult(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("setTagResult", map);
	    }
	}

	public static void handleDeleteTagResult(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("deleteTagResult", map);
	    }
	}

	public static void handleTextMessage(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("textMessage", map);
	    }
	}

	public static void handleNotifactionClick(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("notifactionClick", map);
	    }
	}

	public static void handleNotifactionShow(Object data){
		TpushModule tp = getModule();
		if (tp != null) {
			HashMap<String, Object> map = (HashMap<String, Object>)data;
			tp.fireEvent("notifactionShow", map);
	    }
	}

}

